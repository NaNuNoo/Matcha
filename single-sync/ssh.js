// Generated by CoffeeScript 1.11.1
(function() {
  var SftpDirInfo, SftpFileInfo, SftpFileSystem, create, scanSftpFolder, ssh;

  ssh = require("ssh2");

  SftpFileInfo = (function() {
    function SftpFileInfo(name, sftpName, mtime) {
      this.name = name;
      this.sftpName = sftpName;
      this.mtime = mtime;
      return;
    }

    return SftpFileInfo;

  })();

  SftpDirInfo = (function() {
    function SftpDirInfo(name, sftpName, children) {
      this.name = name;
      this.sftpName = sftpName;
      this.children = children;
      return;
    }

    return SftpDirInfo;

  })();

  SftpFileSystem = (function() {
    var _sftpMkdir_, _sftpRead_, _sftpRmdir_, _sftpUnlink_, _sftpWrite_;

    function SftpFileSystem() {
      this._sshClient = null;
      this._sftpClient = null;
      this._dirsMap = Object.create(null);
      this._filesMap = Object.create(null);
      return;
    }

    _sftpRead_ = function(localPath, remotePath, callback) {
      return function(error) {
        if (error) {
          return callback(error);
        } else {
          return this._sftp.fastGet(remotePath, localPath, callback);
        }
      };
    };

    _sftpWrite_ = function(localPath, remotePath, callback) {
      return function(error) {
        if (error) {
          return callback(error);
        } else {
          return this._sftp.fastPut(remotePath, localPath, callback);
        }
      };
    };

    _sftpUnlink_ = function(remotePath, callback) {
      return function(error) {
        if (error) {
          return callback(error);
        } else {
          return this._sftp.unlink(remotePath, callback);
        }
      };
    };

    _sftpMkdir_ = function(remotePath, callback) {
      return function(error) {
        if (error) {
          return callback(error);
        } else {
          return this._sftp.mkdir(remotePath, callback);
        }
      };
    };

    _sftpRmdir_ = function(sftpClient, remotePath, callback) {
      return function(error) {
        if (error) {
          return callback(error);
        } else {
          return this._sftp.rmdir(remotePath, callback);
        }
      };
    };

    SftpFileSystem.prototype.readFile = function(remotePath, localPath, callback) {
      var readFunc;
      if (!this._filesMap[remotePath]) {
        process.nextTick(callback, new Error(""));
      } else {
        readFunc = this._sftpRead_(remotePath, localPath, callback);
        readFunc(null);
      }
    };

    SftpFileSystem.prototype.writeFile = function(remotePath, localPath, callback) {
      var entryFunc, i, idx, ref, subPath;
      entryFunc = this._sftpWrite_(remotePath, localPath, callback);
      for (idx = i = ref = remotePath.length - 1; i >= 0; idx = i += -1) {
        if ("/" === remotePath[idx]) {
          subPath = remotePath.slice(0, idx);
          if (!this._dirsMap[subPath]) {
            this._dirsMap[subPath] = 1;
            entryFunc = this._sftpMkdir_(subPath, entryFunc);
          } else {
            this._dirsMap[subPath] = this._dirsMap[subPath] + 1;
            break;
          }
        }
      }
      entryFunc(null);
    };

    SftpFileSystem.prototype.removeFile = function(remotePath, callback) {
      var entryFunc, i, idx, ref, subPath;
      if (!this._filesMap[remotePath]) {
        process.nextTick(callback, new Error(""));
      } else {
        entryFunc = this._sftpUnlink_(remotePath, callback);
        for (idx = i = ref = remotePath.length - 1; i >= 0; idx = i += -1) {
          if ("/" === remotePath[idx]) {
            subPath = remotePath.slice(0, idx);
            this._dirsMap[subPath] = this._dirsMap[subPath] - 1;
            if (0 === this._dirsMap[subPath]) {
              delete this._dirsMap[subPath];
              entryFunc = this._sftpRmdir_(subPath, entryFunc);
            } else {
              this._dirsMap[subPath] = this._dirsMap[subPath] + 1;
              break;
            }
          }
        }
        entryFunc(null);
      }
    };

    SftpFileSystem.prototype.destory = function() {
      return this._sshClient.end();
    };

    return SftpFileSystem;

  })();

  scanSftpFolder = function(sftpClient, rootPath) {
    return new Promise(function(resolve, reject) {
      var dirsMap, filesMap, scanStack, travel;
      rootPath = path.normalize(rootPath + "/").slice(0, -1);
      filesMap = Object.create(null);
      dirsMap = Object.create(null);
      scanStack = new Array();
      scanStack.push("");
      return travel = function() {
        var parent, sftpParent;
        parent = scanStack.pop();
        sftpParent = rootPath + "/" + parent;
        return sftpClient.readdir(sftpParent, function(error, infosArray) {
          var child, i, info, len, sftpChild;
          if (error) {
            reject(error);
          } else {
            dirsMap[parent] = new SftpDirInfo(parent, sftpParent, infosArray.length);
            for (i = 0, len = infosArray.length; i < len; i++) {
              info = infosArray[i];
              child = parent + "/" + info.filename;
              if ("d" === info.longname[0]) {
                scanStack.push(child);
              } else {
                sftpChild = rootPath + "/" + parent + "/" + info.filename;
                dirsMap[child] = new SftpFileInfo(child, sftpChild, info.attrs.mtime);
              }
            }
          }
          if (scanStack.length > 0) {
            return travel();
          } else {
            return resolve({
              filesMap: filesMap,
              dirsMap: dirsMap
            });
          }
        });
      };
    });
  };

  SftpFileSystem.create(options, rootPath, callback)(function() {
    var ins;
    ins = new SftpFileSystem();
    createSshAndSftp(options).then(function(args) {
      ins._sshClient = args.sshClient;
      return ins._sftpClient = args.sftpClient;
    }).then(scanSftpFolder(ins._sftpClient, rootPath)).then(function(args) {
      ins._filesMap = filesMap;
      return ins._dirsMap = dirsMap;
    })["catch"](function(error) {});
  });

  create = function(options) {
    var sftpClient, sshClient;
    sshClient = null;
    sftpClient = null;
    return new Promise(function(resolve, reject) {
      sshClient = new ssh.Client();
      sshClient.context(options);
      sshClient.on("error", function(error) {
        return reject(error);
      });
      return sshClient.on("ready", function() {
        return resolve();
      });
    }).then(function() {
      return new Promise(function(resolve, reject) {
        return sshClient.sftp(function(error, sftpClient) {
          if (error) {
            return reject(error);
          } else {
            return resolve();
          }
        });
      });
    }).then(function() {
      return console.log("OK");
    })["catch"](function() {
      if (sshClient) {
        sshClient.end();
      }
      return console.log(error);
    });
  };

  create({
    host: 'fenqi.io',
    port: 22,
    username: 'nanuno',
    password: "jbcnmb8888"
  });

}).call(this);
